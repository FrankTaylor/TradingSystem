########################### jedis pool 配置 ########################### 

# jedis项目的github：https://github.com/xetorthio/jedis
# 该连接池的配置可以参考 package redis.clients.jedis.JedisPoolConfig; 
# 
# 源码：
# package redis.clients.jedis;
# import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
# public class JedisPoolConfig extends GenericObjectPoolConfig {
#     public JedisPoolConfig() {
#         // defaults to make your life with connection pool easier :)
#         setTestWhileIdle(true);
#         setMinEvictableIdleTimeMillis(60000);
#         setTimeBetweenEvictionRunsMillis(30000);
#         setNumTestsPerEvictionRun(-1);
#     }
# }
# 由于这个连接池是使用 apache-commons-pool2框架来实现，所以还应参考该框架的源码。
#
# 设置一个jedis连接池可分配多个少连接线程，如果池中已分配了maxTotal个线程后，此时线程池的状态就变为exhausted，不再提供新的线程。如果赋值为-1，则表示不限制池中分配线程的数量。
# 默认值：8
jedisPool.maxTotal=100
# 设置一个jedis连接池最多可持有多少个状态为idle（空闲）的连接线程。
# 默认值：8
jedisPool.maxIdle=10
# 设置一个jedis连接池最少可持有多少个状态为idle（空闲）的连接线程。
# 默认值：0
jedisPool.minIdle=5
# 设置从池中取出连接线程的最大等待时间，如果超出该时间，则抛出JedisConnectionException。
# 默认值：-1L（表示不限制时长。如果连接池已经耗光所有的连接实例，接着又收到申请连接实例的请求时，该请求将一直阻塞）
jedisPool.maxWaitMillis=3000
# 当线程池的状态变为exhausted（池中的工作线程已耗尽）时，是否阻塞从池中申请线程的操作，直到有可用的连接线程，或超出maxWaitMillis参数设置的时间。
# 默认值：true。
jedisPool.blockWhenExhausted=true

# 是否在池创建连接线程时进行检验，如果检验不通过，则从池中删除该线程，并重新创建一个线程。
# 默认值：false
jedisPool.testOnCreate=false
# 是否对从池中取出连接线程进行检验，如果检验不通过，则从池中删除该线程，并尝试取出另一个线程。
# 默认值：false
jedisPool.testOnBorrow=false
# 是否开启一个“检验池中空闲实例的线程”定期对池中状态为idel（空闲）的连接线程进行校验，如果检验不通过，则从池中删除该线程，该选项只有在timeBetweenEvictionRunsMillis参数大于0时才有意义。
# 默认值：true
jedisPool.testWhileIdle=true
# 是否在连接线程放回池中时进行检验，如果检验不通过，则从池中删除该线程。
# 默认值：false
jedisPool.testOnReturn=false


# 当需要从池中删除线程时，设置所需用到的删除策略类的package路径。
# 默认值：org.apache.commons.pool2.impl.DefaultEvictionPolicy
jedisPool.evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy
# 设置“检验池中空闲实例的线程”多长时间检测一次池中的空闲实例，这个过程直到池中的线程数量小于minIdle为止。该值最好小于minEvictableIdleTimeMillis值
# 默认值：-1L（表示不开启该特性）
jedisPool.timeBetweenEvictionRunsMillis=-1
# 设置池中连接线程的最小空闲时间，当池中线程的空闲时间 > minEvictableIdleTimeMillis时，该线程将会被“检验池中空闲实例的线程”删除。
# 如果Redis设置了timeout参数，则minEvictableIdleTimeMillis最好小于timeout，否则会发生长时间不访问Redis后，由于该连接失效导致访问失败的情况。
# 默认值：1000L * 60L * 30L（30分钟）
jedisPool.minEvictableIdleTimeMillis=1800000
# 当池中线程的空闲时间 > softMinEvictableIdleTimeMillis && 空闲线程的数量 > maxIdle时，该线程将会被“检验池中空闲实例的线程”删除。而不再根据minEvictableIdleTimeMillis判断。
# 默认值：-1（表示该特性不开启）
jedisPool.softMinEvictableIdleTimeMillis=-1
# “检验池中空闲实例的线程”每次抽检的样本数。
# 默认值：jedis连接池中是 -1（表示对池中所有的idle线程都进行检测）；commons-pool2框架中默认值是3
# 
# 源码片段：
# if (numTestsPerEvictionRun >= 0) {
#     return Math.min(numTestsPerEvictionRun, idleObjects.size());
# } else {
#     return (int) (Math.ceil(idleObjects.size() /
#                    Math.abs((double) numTestsPerEvictionRun)));
# }
jedisPool.numTestsPerEvictionRun=-1
# 设置“检验池中空闲实例的线程”


# 我查了源码没看懂（new LinkedBlockingDeque<PooledObject<T>>(config.getFairness()); 这个类没有这个构造器呀？）大概的意思是，是否对池（池是用链表阻塞队列实现的）中的线程使用公平策略吧。
# 默认值：false
jedisPool.fairness=false
# 设置池中的线程将采用何种策略出队。true：采用LIFO（后进先出）；false：采用FIFO（先进先出）
# 默认值：true
#
# 源码片段：入队
# if (getLifo()) {
#     idleObjects.addFirst(p);
# } else {
#     idleObjects.addLast(p);
# }
# 
# 源码片段：出队
# if (evictionIterator == null || !evictionIterator.hasNext()) {
#     if (getLifo()) {
#         evictionIterator = idleObjects.descendingIterator();
#     } else {
#         evictionIterator = idleObjects.iterator();
#     }
# }
jedisPool.lifo=true


# 是否开启jedis线程池的JMX（Java管理扩展）。我不是很清楚这个干什么的，Tomcat7中的JDBC连接池也用到了这个属性。
# 默认值：true
jedisPool.jmxEnabled=true
# 设置jedis线程池中JMX的基础命名。
# 默认值：null
jedisPool.jmxNameBase=null
# 设置jedis线程池中JMX的名称前缀。
# 默认值：pool
jedisPool.jmxNamePrefix=pool

########################### spring-data-redis jedis 配置 ###########################

# 是否使用jedis连接池。
# 默认值：true
spring.data.jedis.usePool=true

# 主机地址。
# 默认值：localhost
spring.data.jedis.hostName=192.168.56.102
# spring.data.jedis.hostName=127.0.0.1
# Redis服务端口号。
# 默认值：redis.clients.jedis.Protocol.DEFAULT_PORT（6379）
spring.data.jedis.port=6379
# Redis服务密码，如果Redis没有密码就不用在spring文件中设置了。
# 默认值：null
spring.data.jedis.password=null
# 连接超时时间。
# 默认值：redis.clients.jedis.Protocol.DEFAULT_TIMEOUT（10000）;
spring.data.jedis.timeout=10000
# 连接的库名称。
# 默认值：0
spring.data.jedis.database=0

# 是否开启对象类到存储结果之间的转换。经我测试好像赋值成false也可以，所以这个配置项的解释可能是错的。
# 默认值：true
spring.data.jedis.convertPipelineAndTxResults=true

						